def clamp_angle(angle):
    """Ограничивает угол в диапазоне 0-180 градусов"""
    return max(0, min(180, angle))

def apply_angles_safe(angles):
    """Безопасное применение углов с проверкой границ"""
    # Ключица
    Front_Right_clauiculum(clamp_angle(angles['FR_clav'] + OFFSET.get('FR_clav', 0)))
    Front_Left_clauiculum(clamp_angle(angles['FL_clav'] + OFFSET.get('FL_clav', 0))))
    Back_Left_clauiculum(clamp_angle(angles['BL_clav'] + OFFSET.get('BL_clav', 0))))
    Back_Right_clauiculum(clamp_angle(angles['BR_clav'] + OFFSET.get('BR_clav', 0))))
    
    # Плечи
    Front_Right_humerus(clamp_angle(angles['FR_hum'] + OFFSET.get('FR_hum', 0))))
    Front_Left_humerus(clamp_angle(angles['FL_hum'] + OFFSET.get('FL_hum', 0))))
    Back_Left_humerus(clamp_angle(angles['BL_hum'] + OFFSET.get('BL_hum', 0))))
    Back_Right_humerus(clamp_angle(angles['BR_hum'] + OFFSET.get('BR_hum', 0))))
    
    # Предплечья
    Front_Right_radii(clamp_angle(angles['FR_rad'] + OFFSET.get('FR_rad', 0))))
    Front_Left_radii(clamp_angle(angles['FL_rad'] + OFFSET.get('FL_rad', 0))))
    Back_Left_radii(clamp_angle(angles['BL_rad'] + OFFSET.get('BL_rad', 0))))
    Back_Right_radii(clamp_angle(angles['BR_rad'] + OFFSET.get('BR_rad', 0))))

def smooth_transition(start_angles, end_angles, duration=2.0, steps=50):
    """Безопасный переход с проверкой углов"""
    delay = duration / steps
    for i in range(steps+1):
        ratio = i / steps
        current_angles = {}
        for key in start_angles:
            current_angles[key] = start_angles[key] + (end_angles[key] - start_angles[key]) * ratio
        apply_angles_safe(current_angles)
        time.sleep(delay)

# Позы с безопасными углами
def get_lay_pose():
    return {
        'FR_clav': 90, 'FL_clav': 90, 'BL_clav': 90, 'BR_clav': 90,
        'FR_hum': 30,  'FL_hum': 30,  'BL_hum': 30,  'BR_hum': 30,  # Увеличен минимум для избежания 0
        'FR_rad': 30,  'FL_rad': 30,  'BL_rad': 30,  'BR_rad': 30
    }

def get_stay_pose():
    return {
        'FR_clav': 90, 'FL_clav': 90, 'BL_clav': 90, 'BR_clav': 90,
        'FR_hum': 60,  'FL_hum': 60,  'BL_hum': 60,  'BR_hum': 60,
        'FR_rad': 90,  'FL_rad': 90,  'BL_rad': 90,  'BR_rad': 90  # Уменьшен максимум для избежания 120
    }

def get_sit_pose():
    return {
        'FR_clav': 90, 'FL_clav': 90, 'BL_clav': 90, 'BR_clav': 90,
        'FR_hum': 80,  'FL_hum': 80,  'BL_hum': 50,  'BR_hum': 50,  # Скорректированные углы
        'FR_rad': 80,  'FL_rad': 80,  'BL_rad': 50,  'BR_rad': 50
    }

# Обновленные функции переходов
def lay_to_stay(duration=3.0):
    smooth_transition(get_lay_pose(), get_stay_pose(), duration)

def stay_to_lay(duration=3.0):
    smooth_transition(get_stay_pose(), get_lay_pose(), duration)

def lay_to_sit(duration=2.0):
    smooth_transition(get_lay_pose(), get_sit_pose(), duration)

def sit_to_lay(duration=2.0):
    smooth_transition(get_sit_pose(), get_lay_pose(), duration)

def sit_to_stay(duration=2.0):
    smooth_transition(get_sit_pose(), get_stay_pose(), duration)

def stay_to_sit(duration=2.0):
    smooth_transition(get_stay_pose(), get_sit_pose(), duration)
